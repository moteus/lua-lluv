---
--
-- Main architecture.
-- <br/>* All function with callback - callback is last argument.
-- <br/>* In callback first argument is object. It could be loop or specific object(e.g. file).
-- <br/>* Second argument is error object or nil.
-- <br/>* loop parameter could be omit in constructors.
-- <br/>   uv.XXX(loop, ...) - correct
-- <br/>   uv.XXX(...) - correct loop is uv.default_loop()
-- <br/>   uv.XXX(nil, ...) - loop is uv.default_loop(), but first parameter in ctor is nil
--
-- @module lluv

-- callbacks
do

--- Definition for callback passed to uv.walk.
--
-- @tparam uv_handle handle
function walk_cb                    () end

end

-- loop
do

--- Run event loop.
--
-- @tparam[opt] function msgh error message handler
-- @tparam[opt=uv.RUN_DEFAULT] number run mode
--
-- @usage
--  uv.run(debug.traceback)
--  uv.run(uv.RUN_ONCE)
function run                        () end

--- Stop event loop.
--
function stop                       () end

--- Iterate over handles.
--
-- @tparam walk_cb callback
function walk                       () end

--- Return the current timestamp in milliseconds.
--
-- @treturn number milliseconds
function now                        () end

--- Return default loop object.
--
-- @treturn uv_loop loop
function default_loop               () end

end

-- ctor
do
function tty                        () end
function tcp                        () end
function udp                        () end
function timer                      () end
function idle                       () end
function fs_event                   () end
function fs_poll                    () end
function loop                       () end
function pipe                       () end
function poll                       () end
function prepare                    () end
function check                      () end
function spawn                      () end
function signal                     () end
end

-- misc
do
function version                    () end
function get_process_title          () end
function set_process_title          () end
function resident_set_memory        () end
function uptime                     () end
function getrusage                  () end
function cpu_info                   () end
function interface_addresses        () end
function exepath                    () end
function cwd                        () end
function chdir                      () end
function get_total_memory           () end
function get_free_memory            () end
function hrtime                     () end
end

-- fs submodule
do

--- Remove the specified file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to unlink
-- @tparam[opt] function callback(loop, err, path)
function fs_unlink                  () end

--- Create the temporary directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory template name to create
-- @tparam[opt] function callback(loop, err, path)
function fs_mkdtemp                 () end

--- Create the specified directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to create
-- @tparam[opt] function callback(loop, err, path)
function fs_mkdir                   () end

--- Remove the specified directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to remove
-- @tparam[opt] function callback(loop, err, path)
function fs_rmdir                   () end

--- List files from a directory.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path directory to list
-- @tparam[opt] function callback(loop, err, path, files)
function fs_scandir                 () end

--- Crossplatform file stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to stat
-- @tparam[opt] function callback(loop, err, path, stat)
function fs_stat                    () end

--- Crossplatform link stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path link to stat
-- @tparam[opt] function callback(loop, err, path, stat)
function fs_lstat                   () end

--- Rename file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string new_path new name for the file
-- @tparam[opt] function callback(loop, err, path)
function fs_rename                  () end

--- Change file permissions.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file which permissions will be changed
-- @tparam number mode file permissions (e.g. 0755)
-- @tparam[opt] function callback(loop, err, path)
function fs_chmod                   () end

--- Update file timestamps.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file which times will be changed
-- @tparam number atime new accessed time
-- @tparam number mtime new modified time
-- @tparam[opt] function callback(loop, err, path)
function fs_utime                   () end 

--- Create a symlink.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string new_path name for the symlink
-- @tparam[opt] number flags 
-- @tparam[opt] function callback(loop, err, path)
function fs_symlink                 () end

--- Read link file and return the original file path.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path link name
-- @tparam[opt] function callback(loop, err, path)
function fs_readlink                () end

--- Changes ownership of a file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam number uid User ID
-- @tparam number gid GroupID
function fs_chown                   () end

--- Open file.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path original file
-- @tparam string mode for opening the file (e.g. "w+b")
-- @tparam[opt] number flags flags for opening the file
-- @tparam[opt] function callback(file, err, path)
function fs_open                    () end

end

-- process submodule
do
--- Disables inheritance for file descriptors / handles that this process inherited from its parent.
--
function disable_stdio_inheritance  () end

--- Sends the specified signal to the given PID.
--
-- @tparam number pid process id
-- @tparam[opt=uv.SIGTERM] number sugnal
-- @return true
function kill                       () end

end

--- lluv error object
-- @type uv_error
--
do

--- Get the error category.
-- 
-- @treturn number number of error category (uv.ERROR_XXX constants e.g. uv.ERROR_UV)
--
function category                   () end

--- Get the number value of error.
-- 
-- @treturn number number of error (uv.EXXX constants e.g. uv.EOF)
function no                         () end

--- Get the error name.
--
-- @treturn string error name (e.g. "EOF")
function name                       () end

--- Get the error description.
-- 
-- @treturn string error description (e.g. "Login denied")
function msg                        () end

--- Get the extinsion information about error.
-- This field e.g. contains file path for fs_xxx function.
--
-- @treturn string error information
function ext                        () end

--- Get the full error description.
--
-- @treturn string string that contain name, message and number of error
function __tostring                 () end

end

--- lluv fixed buffer
-- @type uv_fbuffer
--
do

--- Free buffer.
--
function free                       () end

--- Return buffer data as string.
--
-- @tparam[opt=0] number offset starting from 0
-- @tparam[opt=self:size()] number size
-- @treturn string data
--
-- @usage
-- str = buf:to_s(10) -- return first 10 bytes
-- str = buf:to_s(5, 10) -- return 10 bytes starting from 5th
function to_s                       () end

--- Return buffer data as lightuserdata.
--
-- @tparam[opt=0] number offset starting from 0
-- @treturn lightuserdata pointer
--
-- @usage
-- ptr = buf:to_p(4)
function to_p                       () end

--- Return number of bytes in buffer.
--
-- @treturn number size
function size                       () end

end

--- lluv file object
-- @type uv_file
--
do

--- Return loop object where this handle runs.
--
-- @treturn uv_loop
function loop                       () end

--- Crossplatform file stat.
--
-- @tparam[opt] uv_loop loop
-- @tparam string path file to stat
-- @tparam[opt] function callback(self, err, stat)
function stat                       () end

--- Sync all changes made to file.
--
-- @tparam[opt] function callback(self, err)
function sync                       () end

--- Sync data changes made to file.
--
-- @tparam[opt] function callback(self, err)
function datasync                   () end

--- Truncate the contents of a file to the specified offset.
--
-- @tparam number offset
-- @tparam[opt] function callback(self, err)
function truncate                   () end

--- Close file handle.
--
-- @tparam[opt] function callback(self, err)
function close                      () end

---
--
function chown                      () end

---
--
function chmod                      () end

---
--
function utime                      () end

--- Read data from file.
--
-- @tparam uv_fbuffer buffer
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Read data from file.
--
-- @tparam number buffer_length allocate buffer that size.
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Read data from file.
--
-- @tparam lightuserdata buffer pointer to buffer
-- @tparam number buffer_length buffer size.
-- @tparam[opt=0] number position specifying where to begin reading from in the file.
-- @tparam[opt=0] number offset offset in the buffer to start writing at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to reading.
-- @tparam function callback(file, err, buffer, size)
function read                       () end

--- Write data to file.
--
-- @tparam buffer|string data
-- @tparam[opt=0] number position specifying where to begin writing to in the file.
-- @tparam[opt=0] number offset offset in the buffer to start reading at.
-- @tparam[opt=buffer:size()-offset] number length number of bytes to writing.
-- @tparam function callback(file, err, data, size)
function write                      () end

end

--- lluv loop type
-- @type uv_loop
--
do

---
--
function run        () end

---
--
function close      () end

---
--
function alive      () end

---
--
function stop       () end

---
--
function now        () end

---
--
function walk       () end

---
--
function close_all_handles() end

end

--- lluv file handle
-- @type uv_handle
--
do

---
--
function loop                       () end

---
--
function close                      () end

---
--
function ref                        () end

---
--
function unref                      () end

---
--
function has_ref                    () end

---
--
function is_active                  () end

---
--
function is_closing                 () end

---
--
function send_buffer_size           () end

---
--
function recv_buffer_size           () end

---
--
function fileno                     () end

end

--- lluv idle handle
-- @type uv_idle
--
do

---
--
function start                      () end

---
--
function stop                       () end

end

--- lluv timer handle
-- @type uv_timer
--
do

---
--
function start                      () end

---
--
function stop                       () end

---
--
function again                      () end

---
--
function set_repeat                 () end

---
--
function get_repeat                 () end

end

--- 
-- @type uv_fs_event
--
do
function start                      () end
function stop                       () end
function getpath                    () end
end

---
-- @type ub_fs_poll
--
do
function start                      () end
function stop                       () end
function getpath                    () end
end

---
-- @type ub_pipe
--
do
function open                       () end
function bind                       () end
function connect                    () end
function getsockname                () end
function pending_instances          () end
function pending_count              () end
function pending_type               () end
end

---
-- @type ub_prepare
--
do
function start                      () end
function stop                       () end
end

---
-- @type ub_check
--
do
function start                      () end
function stop                       () end
end

---
-- @type uv_process
--
do

--- Get process ID.
-- 
-- @treturn number process id
function pid                        () end

--- Sends the specified signal to the given process handle.
--
-- @tparam[opt=uv.SIGTERM] number sugnal
-- @treturn uv_process self
function kill                       () end

end

---
-- @type ub_signal
--
do
function start                      () end
function stop                       () end
end

---
-- @type ub_stream
--
do
function shutdown                   () end
function listen                     () end
function accept                     () end
function start_read                 () end
function stop_read                  () end
function try_write                  () end
function write                      () end
function is_readable                () end
function is_writable                () end
function set_blocking               () end
end

---
-- @type ub_tcp
--
do
function open                       () end
function bind                       () end
function connect                    () end
function nodelay                    () end
function keepalive                  () end
function simultaneous_accepts       () end
function getsockname                () end
function getpeername                () end
end

---
-- @type ub_tty
--
do
function set_mode                   () end
function get_winsize                () end
end

---
-- @type ub_udp
--
do
function open                       () end
function bind                       () end
function try_send                   () end
function send                       () end
function getsockname                () end
function start_recv                 () end
function stop_recv                  () end
function set_membership             () end
function set_multicast_loop         () end
function set_multicast_ttl          () end
function set_multicast_interface    () end
function set_broadcast              () end
function set_ttl                    () end
end

